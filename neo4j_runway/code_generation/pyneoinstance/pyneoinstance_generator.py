"""
This file contains the code to generate PyNeoInstance configuration code.
"""

from typing import Any, Dict, List, Optional, Union

import yaml

from ...models.core import DataModel
from ...utils.create_directory import create_directory
from ..base import BaseCodeGenerator
from ..cypher import format_pyneoinstance_pre_or_post_ingest_code


class PyNeoInstanceConfigGenerator(BaseCodeGenerator):
    """
    Class responsible for generating the PyNeoInstance config yaml.

    Attributes
    ----------
    data_model : DataModel
        The data model to base ingestion code on.
    file_output_directory : str, optional
        The location that generated files should be saved to.
    strict_typing : bool, optional
        Whether to use the types declared in the data model (True), or infer types during ingestion (False).
    username : Union[str, None], optional
        The Neo4j username. Providing credentials here will write them into the configuration. Use with caution!
    password : Union[str, None], optional
        The Neo4j password. Providing credentials here will write them into the configuration. Use with caution!
    uri : Union[str, None], optional
        The Neo4j uri. Providing credentials here will write them into the configuration. Use with caution!
    database : Union[str, None], optional
        The Neo4j database. Providing credentials here will write them into the configuration. Use with caution!
    pre_ingest_code : Union[str, List[str], None], optional
            Code to be run before data is ingested. This should include any constraints or indexes that will not be auto-generated by Runway. By default = None
    post_ingest_code : Union[str, List[str], None], optional
        Code to be run after all data is ingested. By default = None

    """

    def __init__(
        self,
        data_model: DataModel,
        file_output_directory: str = "./",
        strict_typing: bool = True,
        username: Optional[str] = None,
        password: Optional[str] = None,
        uri: Optional[str] = None,
        database: Optional[str] = None,
        pre_ingest_code: Optional[Union[str, List[str]]] = None,
        post_ingest_code: Optional[Union[str, List[str]]] = None,
    ):
        """
        Class responsible for generating the PyNeoInstance config yaml.

        Parameters
        ----------
        data_model : DataModel
            The data model to base ingestion code on.
        file_output_directory : str, optional
            The location that generated files should be saved to.
        strict_typing : bool, optional
            Whether to use the types declared in the data model (True), or infer types during ingestion (False).
        username : Union[str, None], optional
            The Neo4j username. Providing credentials here will write them into the configuration. Use with caution!
        password : Union[str, None], optional
            The Neo4j password. Providing credentials here will write them into the configuration. Use with caution!
        uri : Union[str, None], optional
            The Neo4j uri. Providing credentials here will write them into the configuration. Use with caution!
        database : Union[str, None], optional
            The Neo4j database. Providing credentials here will write them into the configuration. Use with caution!
        pre_ingest_code : Union[str, List[str], None], optional
                Code to be run before data is ingested. This should include any constraints or indexes that will not be auto-generated by Runway. By default = None
        post_ingest_code : Union[str, List[str], None], optional
            Code to be run after all data is ingested. By default = None
        """
        super().__init__(
            data_model=data_model,
            file_output_directory=file_output_directory,
            strict_typing=strict_typing,
        )

        self.username: Union[str, None] = username
        self.password: Union[str, None] = password
        self.uri: Union[str, None] = uri
        self.database: Union[str, None] = database
        self.pre_ingest_code = pre_ingest_code
        self.post_ingest_code = post_ingest_code

    def generate_config_yaml(
        self,
        file_name: str = "pyneoinstance_config.yaml",
    ) -> None:
        """
        Generate the PyNeoInstance YAML config file.

        Parameters
        ----------
        file_name : str, optional
            Name of the file, by default "pyneoinstance_config.yaml"
        """

        create_directory(self.file_output_dir + file_name)

        with open(f"{self.file_output_dir}{file_name}", "w") as config_yaml:
            config_yaml.write(self.generate_config_string())

    def generate_config_string(
        self,
    ) -> str:
        """
        Generate the PyIngest yaml in string format.

        Returns
        -------
        str
            The yaml configuration in string format.
        """

        constraints = [x.strip() for x in self._constraints.values()]
        nodes = {k: v["cypher"] for k, v in self._nodes.items()}
        relationships = {k: v["cypher"] for k, v in self._relationships.items()}

        queries: Dict[str, Any] = dict()

        if self.pre_ingest_code is not None:
            queries.update(
                {
                    "pre-load": constraints
                    + format_pyneoinstance_pre_or_post_ingest_code(
                        data=self.pre_ingest_code
                    )
                }
            )
        else:
            queries.update({"pre-load": constraints})

        queries.update({"load": {"nodes": nodes, "relationships": relationships}})

        if self.post_ingest_code is not None:
            queries.update(
                {
                    "post-load": format_pyneoinstance_pre_or_post_ingest_code(
                        data=self.post_ingest_code
                    )
                }
            )

        file_dict = {
            "neo4j": {
                "uri": self.uri,
                "user": self.username,
                "password": self.password,
                "database": self.database,
            },
            "queries": queries,
        }

        return yaml.dump(file_dict, sort_keys=False)
